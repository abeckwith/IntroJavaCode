import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
/**
 * JPanel can be used as a canvas to draw on
 */
public class Drawing extends JPanel
{
    //VARIABLES USED IN DRAWING LINES:
    boolean multipleColors = false;  //start at false

    //start in the center:
    int x = 550;   
    int y = 400;

    //(x,y) of line endpoint:
    int x_next, y_next;  

    int theta;  //current angle to next line

    int  lineCount = 1; 
    double lineLength;

    int turnAngle = 30;    //start at 30

    double lineLengthMultiplier = 0.2;  // (start at 0.2) INCREASE IF TOO CLUTTERED

    int lineThickness = 1; //(start at 1)

    //store x and y coords:
    ArrayList<Integer> xValues = new ArrayList<Integer>();
    ArrayList<Integer> yValues = new ArrayList<Integer>();

    String[] COLORS  = {"#72A2C0", "#00743F", "#F2A104", "#C0443D", "#192E5B"};
    /** 
     * Constructor - called by the code "new Drawing(w, h)"
     */
    public Drawing()
    {
        super.repaint();
    }

    /**
     * called by repaint() 
     */
    public void paintComponent(Graphics g)
    {
        //g is a "graphics object, generated by Java
        //g2 allows for finer drawings
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setStroke(new BasicStroke(lineThickness));

        //GET NEXT ANGLE:
        theta = lineCount * turnAngle % 360;

        //GET NEXT LINE LENGTH:
        lineLength = lineCount * lineLengthMultiplier;

        //ADDS RANDOMNESS to line length or angle
        lineLength  += Math.random() * 0;  //start at 0 (CHANGE TO > 0 TO ADD RANDOMNESS)
        theta       += Math.random() * 0;  // a smallish 2-digit number is good

        // Calculate the end point of the line: 
        x_next = (int) Math.round(x + lineLength * Math.cos(theta * Math.PI / 180));
        y_next = (int) Math.round(y + lineLength * Math.sin(theta * Math.PI / 180));

        //SAVE (X,Y):
        xValues.add(x_next);
        yValues.add(y_next);

        setBackground(Color.BLACK);

        //DRAW ALL LINES:
        for(int i = 0; i < xValues.size() - 1; i++)
        {
            int currentColorNum = lineCount % COLORS.length;  //cycle through colors

            if(multipleColors == true)  g.setColor(Color.decode(COLORS[currentColorNum]));
            else                        g.setColor(Color.RED);  

            g.drawLine(xValues.get(i), yValues.get(i), xValues.get(i + 1), yValues.get(i + 1));
        }
        g.fillOval(xValues.get(xValues.size() - 1), yValues.get(yValues.size() - 1), 15, 15);
        //save last endpoint
        x = x_next; 
        y = y_next;
        lineCount++;
        //g.drawString("" + lineCount, 20, 20);   //can put text in here
    }
}
