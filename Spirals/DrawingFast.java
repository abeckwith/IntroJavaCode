
import javax.swing.*;
import java.awt.*;
/**
 * JPanel can be used as a canvas to draw on
 */
public class DrawingFast extends JPanel
{
    //VARIABLES USED IN DRAWING LINES:
    int theta;                          //will be current angle
    double lineLength;                  //grows as spiral grows
    int numberOfLines       = 1000;     //CHANGE AS NEEDED (start at 1000
    boolean multipleColors  = false;     //CHANGE AS NEEDED (start at false)

    int startX, startY;     //(x,y) where spiral starts
    int x, y;               //(x,y) of first endpoint of each line
    int x_next, y_next;     //(x,y) of second endpoint of each line

    int turnAngle = 30;    //start at 30

    double lineLengthMultiplier = 0.2;  // (start at 0.2) INCREASE IF TOO CLUTTERED
    int lineThickness = 1; //(start at 1)
    String[] COLORS  = {"#72A2C0", "#00743F", "#F2A104", "#C0443D", "#192E5B"};
    
    /** 
     * Constructor - called by the code "new Drawing(w, h)"
     */
    public DrawingFast(int screenWidth, int screenHeight)
    {
        super.repaint();
        //start spiral at center of screen:
        startX = screenWidth / 2;
        startY = screenHeight / 2;
    }

    /**
     * Does all drawings - called by repaint()
     */
    public void paintComponent(Graphics g)
    {
        int x = startX;
        int y = startY;
        int  lineCount = 1; 

        //g is a "graphics object, generated by Java
        //g2 allows for finer drawings
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setStroke(new BasicStroke(lineThickness));
        setBackground(Color.BLACK);
        //LOOP TO DRAW ALL LINES:
        while(lineCount <= numberOfLines)
        {
            theta = lineCount * turnAngle % 360;

            lineLength = lineCount * lineLengthMultiplier;

            //ADDS RANDOMNESS to line length or angle
            lineLength  += Math.random() * 0;  //start at 0 (CHANGE TO > 0 TO ADD RANDOMNESS)
            theta       += Math.random() * 0;  // a smallish 2-digit number is good

            // Calculate the end point of the line: 
            x_next = (int) Math.round(x + lineLength * Math.cos(theta * Math.PI / 180));
            y_next = (int) Math.round(y + lineLength * Math.sin(theta * Math.PI / 180));

            //CHOOSE COLOR:
            int currentColorNum = lineCount % COLORS.length;  //cycle through colors
            if(multipleColors == true)  g.setColor(Color.decode(COLORS[currentColorNum]));
            else                        g.setColor(Color.RED);   

            //DRAW THE LINE:
            g.drawLine(x, y, x_next, y_next);

            //save last endpoint
            x = x_next; 
            y = y_next;

            lineCount++;
            //g.drawString("" + lineCount, 20, 20);   //can put text in here
        }
    }
}
